// Prisma Schema for HappyRobot Challenge

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Load model - 13 campos requeridos por el challenge
model Load {
  id                String   @id @default(cuid())
  load_id           String   @unique
  origin            String
  destination       String
  pickup_datetime   DateTime
  delivery_datetime DateTime
  equipment_type    String
  loadboard_rate    Float
  notes             String?
  weight            Int
  commodity_type    String
  num_of_pieces     Int
  miles             Int
  dimensions        String

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  negotiations      Negotiation[]

  @@index([origin])
  @@index([destination])
  @@index([equipment_type])
}

// Negotiation model - Tracks negotiation rounds for each call
model Negotiation {
  id              String   @id @default(cuid())
  run_id          String?  // Run identifier from HappyRobot (each call = one run)
  load_id         String
  load            Load     @relation(fields: [load_id], references: [load_id], onDelete: Cascade)

  round           Int      // Negotiation round number (1, 2, 3)
  carrier_offer   Float    // Carrier's offer in dollars
  counter_offer   Float?   // System's counter-offer (if any)
  action          String   // ACCEPT, COUNTER, TRANSFER
  reason          String?  // Explanation of the decision

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([run_id])
  @@index([load_id])
}

// Call model - Tracks complete call data from HappyRobot
model Call {
  id                 String   @id @default(cuid())
  run_id             String?  // Run identifier from HappyRobot for grouping events

  // Carrier information
  mc_number          String?
  carrier            String?  // Carrier company name

  // Load information
  load_id            String?
  final_price        Float?

  // Call outcome classification (from HappyRobot AI Classify)
  outcome            String?  // BOOKED, DECLINED, ERROR
  outcome_reason     String?  // Detailed reason for outcome

  // Sentiment analysis (from HappyRobot AI Classify)
  sentiment          String?  // POSITIVE, NEUTRAL, NEGATIVE

  // Negotiation data (from HappyRobot AI Extract)
  negotiation_rounds Int?     // Number of negotiation rounds (1, 2, 3)

  // Call metadata
  duration           Int?     // Call duration in seconds
  transcript         String?  // Full call transcript (optional)

  // Timestamps
  call_end           DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([run_id])
  @@index([mc_number])
  @@index([load_id])
  @@index([outcome])
  @@index([sentiment])
}

// CallActivity model - Real-time event tracking during active calls
model CallActivity {
  id          String   @id @default(cuid())
  run_id      String   // Run identifier from HappyRobot for grouping events
  event_type  String   // MC_VERIFIED, LOAD_SEARCHED, NEGOTIATION_ROUND, CALL_TRANSFERRED, CALL_ENDED
  data        Json     // Flexible JSON field for event-specific data
  timestamp   DateTime @default(now())

  @@index([run_id])
  @@index([event_type])
  @@index([timestamp])
}
